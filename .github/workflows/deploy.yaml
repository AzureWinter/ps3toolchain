name: Build toolchain docker image

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        persist-credentials: false
    - name: Set up Docker Buildx
      if: success()
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v3
      with:
        buildx-version: latest
        qemu-version: latest
    - name: Available platforms
      if: success()
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Prepare
      if: success()
      id: prepare
      run: |
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
        echo ::set-output name=docker_username::miigotu
        echo ::set-output name=docker_image::docker.io/${GITHUB_REPOSITORY,,}
        VERSION_TAG=${GITHUB_REF#refs/*/}
        echo ::set-output name=version::${VERSION_TAG%/merge}
        echo ::set-output name=docker_cache::docker.io/miigotu/${GITHUB_REPOSITORY,,}
    - name: Docker Login and set build command
      if: success()
      id: login
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin docker.io
        echo  "Available target: ${{ steps.buildx.outputs.platforms }}"
        echo ::set-output name=buildx::$(echo docker buildx build --output type=image,name=${{ steps.prepare.outputs.docker_image }},push=true \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --cache-to "type=registry,ref=${{ steps.prepare.outputs.docker_cache }}:${{ steps.prepare.outputs.version }}" \
          --cache-from "type=registry,ref=${{ steps.prepare.outputs.docker_cache }}:${{ steps.prepare.outputs.version }},mode=max" \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}")

    - name: Run Buildx (master)
      run: |
          ${{ steps.login.outputs.buildx }} --tag "${{ steps.prepare.outputs.docker_image }}:latest" --file Dockerfile .
    - name: Run Buildx (non-master)
      if: success() && !contains(steps.prepare.outputs.version, 'master')
      run: |
        ${{ steps.login.outputs.buildx }} --file Dockerfile .

